<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>Engineering Field Notes. Made by &lt;a href=&quot;http://electronics.stackexchange.com/users/31199/jjmilburn&quot; target=&quot;_blank&quot;&gt;@jjmilburn&lt;/a&gt;.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 12 Jul 2017 20:47:14 -0700</pubDate>
    <lastBuildDate>Wed, 12 Jul 2017 20:47:14 -0700</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Embedded Reliability Blog Series (Angaza)</title>
        <description>&lt;p&gt;A brief notice about a new blog series I’ll be authoring for Angaza.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Instead of posting the same content in both places, I’m including a link here
to a &lt;a href=&quot;https://blog.angaza.com/reliable-bottom-of-pyramid-embedded-systems-cost-benefit-analysis-e0111f6d1e41&quot;&gt;new blog series&lt;/a&gt; I’ll be working
on over the next few months.  It focuses on the testing philosophy and tooling we use for embedded projects at Angaza,
and hopefully gives some insight into why we select the level of testing that we do.&lt;/p&gt;

&lt;p&gt;I’ll also leave you with a fun factoid regarding embedded software at &lt;a href=&quot;https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/20050081994.pdf&quot;&gt;NASA&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Urine Processor Assembly (UPA) is part of the
life support in the ISS. The UPA controller consists of
47 KLOCs of C code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thats 8 KLOCs less than the Materials Science Research Rack, which exists to
‘provide the common subsystems and interfaces required for the operation
of experiment hardware, accomodate telescience capabilities, and provide
the capability for simultaneous on-orbit processing.’&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Jul 2017 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/2017/07/12/Angaza-Embedded-Reliability/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/07/12/Angaza-Embedded-Reliability/</guid>
        
        
      </item>
    
      <item>
        <title>Android Open Accessory Mode (AOA) Support in 2017</title>
        <description>&lt;p&gt;While Bluetooth gets plenty of attention for providing sensor and accessory
connectivity to Android devices, an older protocol introduced at Google I/O
2011 continues to promise widely compatible, no-pairing data wired data
transfer.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;During the course of evaluating connectivity options for an Android-connected
accessory in a recent project, Android Open Accessory (AOA) came up as an
option.  This is a little talked about protocol that has been around since API
3.1, and provides ‘driverless’ support for communicating to an external USB
device which must power the bus (like a host).&lt;/p&gt;

&lt;p&gt;‘Widespread compatibility’ was an important metric for us, which ruled out
USB OTG.  Using OTG/Host mode would reduce the accessory cost and complexity
by removing the need for the accessory to have a battery (since the phone
powers the accessory in OTG mode), but the spotty availability of native,
works-out-of-the-box USB OTG support on low and mid-range handsets eliminated
this as a possibility.&lt;/p&gt;

&lt;p&gt;This left the choices of WiFi, BlueTooth, and AOA.  We decided to determine
empirically how widely supported AOA was, and found the results quite
promising.&lt;/p&gt;

&lt;p&gt;To investigate further, we purchased the &lt;a href=&quot;http://www.ftdichip.com/Products/Modules/DevelopmentModules.htm#UMFT311EV&quot;&gt;UMFT311EV&lt;/a&gt; AOA evaluation board from FTDI. This board implements the full AOA
protocol, and FTDI provides a &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.ftdi.j2xx.hyperterm&amp;amp;hl=en&quot;&gt;UART Terminal App&lt;/a&gt; which, if installed on an Android phone, will send data to a connected AOA
device.&lt;/p&gt;

&lt;p&gt;We used this app and evaluation board, and connected to the UART on the board
to attempt bidirectional communication with the phone from a separate computer
via the FTDI311 evaluation board, using AOA to the phone.&lt;/p&gt;

&lt;h3 id=&quot;phones-tested-for-aoa-support&quot;&gt;Phones Tested for AOA Support&lt;/h3&gt;

&lt;p&gt;This is a list of phones which we tested, where we indicate
“AOA 1.0 Bidirectional Data Support” if the phone met the following criteria:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The phone immediately detects that an AOA accessory is plugged in, and
prompts a relevant dialog upon insertion of the AOA&lt;/li&gt;
  &lt;li&gt;We are able to receive data at our UART terminal connected to the FTDI
evaluation board from the phone&lt;/li&gt;
  &lt;li&gt;We are able to send data from our UART terminal to the phone through the
FTDI evaluation board&lt;/li&gt;
  &lt;li&gt;We do not have to modify any settings or configuration on the phone, it
‘just works’&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the table below, APIs for all phones not supporting AOA are explicitly noted,
as well as a few ‘newer’ models to indicate the firmware at time of testing.&lt;/p&gt;

&lt;p&gt;Manufacturer&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Manufacturer&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Model&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;AOA 1.0 Bidirectional Data Support&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Alcatel&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;918S (API 2.3.6)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;No&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Alcatel&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4007D (API 2.3.6)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;No&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Alcatel&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4015D&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Alcatel&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4028S&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Alcatel&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4032E Pop C2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Asus&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Zenfone&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Blu&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Dash 3.5 (API 2.3.5)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;No&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Blu&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Dash Jr K&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;(Unknown)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;FS358/WaterWorld67715~&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Huawei&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Ideos (API 2.2)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;No&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Huawei&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Honor 3x [G750-T00]&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Huawei&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Y221-U22&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Huawei&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Y330-U05&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Huawei&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Y336&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Infinix&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x351&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Itel&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;it1409&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Jivi&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;JSP20 (API 2.3.5)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;No&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;LG&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;E615&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Mi-Fone&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;MI-A403&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Google&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Pixel (API 7.1.2)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Motorola&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Moto G4 [Athene Core]&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Motorola&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Moto E2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Plum&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;X350&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Prestigio&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3540 DUO&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Samsung&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Galaxy Tab E SMT560-NU&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Samsung&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;GT-S5380V (API 2.3.6)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;No&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Samsung&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;GT-3501L&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Samsung&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;JM-110H/DS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Samsung&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SM-361H/DS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Tecno&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;P5S&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Tecno&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;W4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Tecno&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Y2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Tecno&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Y4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;~ The “FS358” is not labeled beyond the model, and simply reports an oem of
“waterworld67715”&lt;/p&gt;

&lt;p&gt;This is, of course, not comprehensive by any means – but intentionally skewed
towards handsets that are deployed primarily in the developing world.&lt;/p&gt;

&lt;p&gt;Note that all phones which did &lt;strong&gt;not&lt;/strong&gt; support AOA are pre API 3.1; which is
expected.  So far, we have no evidence that phones newer than API 3.1 lack
support for AOA.&lt;/p&gt;

&lt;h3 id=&quot;future-support&quot;&gt;Future Support?&lt;/h3&gt;

&lt;p&gt;It is unclear what the roadmap for AOA support moving forward looks like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Is there an AOA 3.0 with new features on the horizon?&lt;/li&gt;
  &lt;li&gt;Is ‘keeping the status quo’ alive the way forward?
or..&lt;/li&gt;
  &lt;li&gt;Is AOA going to be unceremoniously chopped out at some point?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As ‘feel-good’ evidence for ongoing support, it’s nice that the Pixel clearly
supports AOA (so, this functionality isn’t getting deprecated in today’s latest
‘flagship’ handsets, at least).  It is also nice that all phones we tested with
API &amp;gt;= 3.1 were fully supported.&lt;/p&gt;

&lt;p&gt;Straight from the documentation itself, however, there is no guarantee
that a given handset will have AOA support:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Because not all Android-powered devices are guaranteed to support the USB
accessory APIs, include a &lt;uses-feature&gt; element that declares that your
application uses the android.hardware.usb.accessory feature.&lt;/uses-feature&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://source.android.com/devices/accessories/aoa&quot;&gt;Android Open Accessory Protocol 1.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As for existing uses, a cursory search for commercial products using AOA turned
up automotive head units (car stereos) supporting AOA.  A major online vendor
in the space, Crutchfield, lists a specific section for &lt;a href=&quot;https://www.crutchfield.com/S-Cjr256pIBXL/fg_300_AG_Android_Control%7CFFAOA/Android-Control-AOA-Car-Stereos.html?tp=5684&quot;&gt;“Android Control AOA Car Stereos”&lt;/a&gt;.  This application appears to leverage the 
streaming audio endpoints introduced in &lt;a href=&quot;https://source.android.com/devices/accessories/aoa2&quot;&gt;AOA V2&lt;/a&gt;.
One can imagine wanting to pipe audio from a handset into a car stereo in
higher fidelity than (non-AptX) Bluetooth can provide, but with some form of
audio playback control.  In this, AOA seems to have found a pleasant market
niche.&lt;/p&gt;

&lt;p&gt;Will this still be supported on Android handsets being released in 2020?  No
clear answers yet.&lt;/p&gt;

&lt;p&gt;An interesting factoid discovered along the way – connecting to a phone via ADB,
and executing &lt;code class=&quot;highlighter-rouge&quot;&gt;adb shell ls /system/etc/permissions | grep &quot;usb&quot;&lt;/code&gt; provides
evidence of whether a phone can &lt;em&gt;potentially&lt;/em&gt; support AOA or USB OTG.  Specifically:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Presence of &lt;code class=&quot;highlighter-rouge&quot;&gt;android.hardware.usb.accessory.xml&lt;/code&gt; indicates AOA may be supported&lt;/li&gt;
  &lt;li&gt;Presence of &lt;code class=&quot;highlighter-rouge&quot;&gt;android.hardware.usb.host.xml&lt;/code&gt; indicates USB OTG may be supported&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the relevant XML file is &lt;em&gt;not&lt;/em&gt; present, the phone will not support the
connection mode of interest.&lt;/p&gt;

&lt;h3 id=&quot;additional-resources&quot;&gt;Additional Resources&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://source.android.com/devices/accessories/aoa&quot;&gt;Android Open Accessory Protocol 1.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://source.android.com/devices/accessories/aoa2&quot;&gt;Android Open Accessory Protocol 2.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.csr.com/products/aptx&quot;&gt;“AptX High Quality Bluetooth Music Audio Codec”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 08 May 2017 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/2017/05/08/Android-AOA-Support/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/08/Android-AOA-Support/</guid>
        
        
      </item>
    
      <item>
        <title>The Basics - Certifying a Cellular Product in the US</title>
        <description>&lt;p&gt;Even if your product integrates a cellular module with an FCC certification, it
does not mean that the integrated product is fine to sell on the open market.
This post pulls together estimates from various sources to gain a rough estimate
of total cost for RF-related certification on a product using a ‘certified’
cellular module.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;First, lets be clear – I’m not a legal expert on cellular certifications, and
the information in this post is meant to be informative, not a complete guide
to what you need to cerify a GSM product in the US.  With that in mind, lets
proceed to explore this topic.&lt;/p&gt;

&lt;p&gt;If you intend to sell a product with radio communication in the EU, &lt;a href=&quot;http://www.tuv.com/en/usa/services_usa/product_testing/telecom_it/rtte_directive/rtte_directive.html&quot;&gt;R&amp;amp;TTE&lt;/a&gt; compliance will likely be required.  GSM/M2M modules can be &lt;a href=&quot;http://www.tuv-sud.co.uk/uploads/images/1365171464129234960088/uk-mkg-guide-to-wireless-m2m-module-integration-en-uk.pdf&quot;&gt;individually certified as compliant with R&amp;amp;TTE&lt;/a&gt;, which reduces the testing burden.  A number of third party test facilities (TUV, 7-Layers, IB Lenhardt, etc.) exist which can help take a product through the R&amp;amp;TTE certification process.&lt;/p&gt;

&lt;h3 id=&quot;us-specific---ptcrb&quot;&gt;US Specific - PTCRB&lt;/h3&gt;

&lt;p&gt;This was mentioned briefly in a previous post, but you can’t ignore the PTCRB
if planning to sell in the USA.  As mentioned previously, the cost for this
certification runs between &lt;a href=&quot;http://m2msupport.net/m2msupport/ptcrb-process-costs-timeline-and-labs/&quot;&gt;$16k-20k for a data-only device&lt;/a&gt;.  Other resources suggest a total budget of
&lt;a href=&quot;http://www.aldacom.com/gsm-info/gsm-certification-info.html&quot;&gt;~$80k&lt;/a&gt;, including
all pre-compliance lab testing, field testing, PTCRB, and FCC testing.&lt;/p&gt;

&lt;h3 id=&quot;tests-before-the-tests-precertification&quot;&gt;Tests Before the Tests (Precertification)&lt;/h3&gt;

&lt;p&gt;Before going forward with the formal testing, however, it would be prudent to
seek ‘pre-approval’ testing.  This sort of testing typically examines two key
test parameters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TIS (Total Isotropic Sensitivity) – measuring reception efficiency&lt;/li&gt;
  &lt;li&gt;TRP (Total Radiated Power) – measuring transmission efficiency&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This assumes the device is not ‘near’ a human body, e.g. not a cellphone
or a wearable.  For devices in those categories, you’ll also need to consider
&lt;a href=&quot;http://www.intertek.com/wireless-mobile/devices/sar-testing/&quot;&gt;SAR testing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are &lt;a href=&quot;http://www.taoglas.com/wp-content/uploads/2015/07/Taoglas-Guidelines-for-achieving-highest-RF-performance-and-passing-select-regulatory-approvals-for-cellular-devices-with-internal-antennas-2010042.pdf&quot;&gt;guideline values&lt;/a&gt;
for these measurements given by Taoglas.  Your cellular module supplier and/or
antenna vendor may be able to perform some form of TIS/TRP testing on your
assembled product, and if not, should be able to refer you to appropriate
“TIS/TRP Precertification Test” facilities.  These tests will usually involve the
testing house inserting a test SIM into your device, and executing a number
of tests in an anechoic chamber – during which your device should remain
powered on and your firmware should not be attempting to control the GSM
module.  Confirm with the test house, but generally, the firmware elements
controlling the GSM module should be modified to only power on the GSM module
and otherwise leave it alone (e.g. don’t try to transmit data).&lt;/p&gt;

&lt;p&gt;TIS/TRP testing can acts as a gatekeeper to costlier certifications – if the
device is unable to pass a basic TIS/TRP precertification test, improvements
should be made before moving to the more formal tests (e.g. PTCRB).  While
analysis equipment (a TEM cell, spectrum analyzer, etc) is typically necessary
to pinpoint the source of noise on a PCB, some ‘common’ RF performance
improvement moves include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cvel.clemson.edu/pdf/EMCS00-833.pdf&quot;&gt;Better via stitching to reduce EMI&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Wider/lower inductance power traces to the GSM module&lt;/li&gt;
  &lt;li&gt;Switching to shielded inductors where possible&lt;/li&gt;
  &lt;li&gt;Keeping the antenna distant from metal (the PCB, components, and housing elements)&lt;/li&gt;
  &lt;li&gt;Shorter sensitive signal lines (shorten SIM card interface traces)&lt;/li&gt;
  &lt;li&gt;Keeping the GSM module (and any antenna trace) distant from SMPS elements&lt;/li&gt;
  &lt;li&gt;Keeping the controlling MCU and GSM module on opposite sides of the PCB&lt;/li&gt;
  &lt;li&gt;Any RF traces (antenna to module) are as short as realistically possible&lt;/li&gt;
  &lt;li&gt;Determine and follow exact RF trace width/spacing based on PCB thickness&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;fcc-approved-module&quot;&gt;FCC Approved Module&lt;/h3&gt;

&lt;p&gt;In the US, using an FCC certified wireless module is an absolute requirement.
Fortunately, most modules you’d be considering from major vendors (Simcom,
Telit, Quectel, ZTE, Huawei, Neoway, etc) will already have FCC certification.&lt;/p&gt;

&lt;p&gt;You can check for the FCC record on a given module by searching the &lt;a href=&quot;https://fccid.io/&quot;&gt;fccid.io&lt;/a&gt;
database.  For instance, the &lt;a href=&quot;https://fccid.io/UDV-SIM800C&quot;&gt;Simcom SIM800C&lt;/a&gt; is
an example of a widely available FCC certified cellular module.&lt;/p&gt;

&lt;h3 id=&quot;antenna-selection&quot;&gt;Antenna Selection&lt;/h3&gt;

&lt;p&gt;Ideally, you have plenty of space, and can use an off-the-shelf antenna
and follow the guidelines provided by the manufacturer.  If this is not
the case, I can’t be of much help – consult an antenna expert.  But if you’re
designing an IoT product and need to get it to market, generally de-risk by not
trying to make it as small as possible if you can avoid it – leave around 20mm
air-gap between the antenna and any metal (PCB, screws, buttons, capacitors
or inductors, etc) and you’ll save yourself significant headaches resulting
from interactions in the &lt;a href=&quot;http://www.antenna-theory.com/basics/fieldRegions.php&quot;&gt;near-field region&lt;/a&gt;.
Also, get as efficient an antenna as you can reasonably find for the bands
of interest to you.&lt;/p&gt;

&lt;p&gt;As an example, this Pulse Electronics &lt;a href=&quot;http://productfinder.pulseeng.com/files/datasheets/W3538.pdf&quot;&gt;W3538&lt;/a&gt;
has three different versions with varying efficiencies.  To get maximum
efficiency at the 1710-1990 MHz frequency range, you would select the
W3538B0200 model (it lists 80% efficiency, compared to the 70% efficiency
provided by the other two submodels).  Every step along the chain, there is
signal degradation: the connection point to the PCB, attentuation through
the product enclosure, the RF trace on the PCB, so sourcing an efficient
antenna is one way to reduce losses in the signal chain.&lt;/p&gt;

&lt;h3 id=&quot;additional-resources&quot;&gt;Additional Resources&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://library.ul.com/wp-content/uploads/sites/40/2015/02/UL_WP_Draft_FCC-Approval-of-Host-Devices-with-Integrated-Wireless-Modules_v6.pdf&quot;&gt;“FCC Approval of Host Devices with Integrated Wireless Modules&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.digi.com/pdf/iot_design_certs_cellularapps.pdf&quot;&gt;“Compliance Design &amp;amp; Certification for IOT Cellular Application” (Digi)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.taoglas.com/wp-content/uploads/2015/07/Certification-Requirements-for-a-GSM-Device-in-North-AmericaAPN-14-8-003.A.pdf&quot;&gt;“Certification Requirements for a GSM Device in North America” (Taoglas)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.antenna-theory.com/definitions/trp.php&quot;&gt;antenna-theory.com TRP Page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.antenna-theory.com/definitions/tis.php&quot;&gt;antenna-theory.com TIS Page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 18 Mar 2017 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/2017/03/18/Cellular-Certification-in-USA/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/18/Cellular-Certification-in-USA/</guid>
        
        
      </item>
    
      <item>
        <title>Sharing a Prolific USB-&gt;UART Converter with VirtualBox</title>
        <description>&lt;p&gt;While creating a UART protocol for use in a new product, it
became useful to connect a serial adapter from my host PC to the Vagrant
environment which held the protocol code and its dependencies.  This approach
should work regardless of the UART converter model/brand (Prolific, FTDI, etc)
assuming that plugging the device in creates a &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/ttyUSB[0-9]&lt;/code&gt; entry.  This
guide is written for a *nix host platform (Ubuntu).&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;first-things-first&quot;&gt;First Things First&lt;/h3&gt;

&lt;p&gt;The adapter which was used to test this approach is similar to the
&lt;a href=&quot;https://www.adafruit.com/products/954&quot;&gt;USB to TTL Serial Cable&lt;/a&gt; available on Adafruit; but any similar adapter should work.&lt;/p&gt;

&lt;h3 id=&quot;step-by-step&quot;&gt;Step-By-Step&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Plug in the USB-&amp;gt;Serial adapter, and ensure that it shows up under &lt;code class=&quot;highlighter-rouge&quot;&gt;lsusb&lt;/code&gt;, as well as creating a device entry similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/ttyUSB*&lt;/code&gt; .&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once the adapter is plugged in, execute &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod 666 /dev/ttyUSB0&lt;/code&gt; (substituting ttyUSB0 for whatever USB* port the adapter enumerated to) on the host machine.  Determine the adapter by observing what new entry is added to the output 
of &lt;code class=&quot;highlighter-rouge&quot;&gt;ls /dev/ttyUSB*&lt;/code&gt; when the adapter is plugged into the host machine.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Alternately, ensure that the user running the VirtualBox on the host machine
is in the &lt;code class=&quot;highlighter-rouge&quot;&gt;dialout&lt;/code&gt; group (&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo adduser $USER dialout&lt;/code&gt;).  This requires a
logut/login cycle to take effect.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In the VM VirtualBox Manager GUI, go to “Settings” for the machine which
will receive access to the serial port, and navigate to the “Port 1” tab under
“Serial Ports”. Set “Port Number” to “COM4” (corresponding to a guest VM serial
port of &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/ttyS3&lt;/code&gt;), leave IRQ and I/O port as their defaults, select
“Host Device” as the Port Mode, and type the path to the serial port device
on the &lt;em&gt;Host&lt;/em&gt; machine under “Port/File Path”.  In this example, this is
&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/ttyUSB0&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Vbox_Serial_Port.png&quot; alt=&quot;VirtualBox Serial Port Settings&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;On the guest &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo adduser $USER dialout&lt;/code&gt; will add the guest user to a group
which has access to the serial port interfaces (e.g. /dev/ttyS*).  Execute this command, then log out and back into the guest machine.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ensure the TX/RX lines are connected together on the serial adapter for
the next step (a loopback test from the guest VM).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Log into two separate terminal sessions on the guest VM, in the first
session, type &lt;code class=&quot;highlighter-rouge&quot;&gt;cat /dev/ttyS3&lt;/code&gt;.  In the second terminal session, type
&lt;code class=&quot;highlighter-rouge&quot;&gt;echo &quot;test&quot; &amp;gt; /dev/ttyS3&lt;/code&gt;.  If the serial device from the host is being
successfully passed through to the guest, “test” should appear in the window
where &lt;code class=&quot;highlighter-rouge&quot;&gt;cat&lt;/code&gt; is running.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point, the guest VM has access to read and write to a USB serial adapter
connected to the host machine.  Note that this approach does not require the
guest VM to have any direct USB peripheral access to the host.&lt;/p&gt;

&lt;h2 id=&quot;asides&quot;&gt;Asides&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://pypi.python.org/pypi/pyserial&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PySerial&lt;/code&gt;&lt;/a&gt; is an extremely useful library for abstracting away most of the
complexities involved with programmatically accessing a serial port for UART
communications.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If also occasionally using the serial port outside of the virtual machine,
note that if the virtual machine is currently accessing the serial port (e.g.
the host is passing the serial port directly through to the VM) there will be
problems attempting to use it on the host at the same time.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This approach might not be suitable for near-realtime response requirements
on the serial lines.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 04 Apr 2016 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/2016/04/04/ttyUSB-to-vagrant-virtualbox/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/04/04/ttyUSB-to-vagrant-virtualbox/</guid>
        
        
      </item>
    
      <item>
        <title>Beyond FCC - Exploring International RF Regulations</title>
        <description>&lt;p&gt;While hardware which intentionally radiates RF falls under &lt;a href=&quot;http://www.digikey.com/en/articles/techzone/2011/mar/the-fcc-road-part-15-from-concept-to-approval&quot;&gt;FCC Part 15&lt;/a&gt; in the US, other countries might not be so clear.  This post introduces a few of the regulatory frameworks and bodies operative outside of the US which apply to GSM/cellular communications.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;rtte&quot;&gt;R&amp;amp;TTE&lt;/h3&gt;

&lt;p&gt;If you intend to sell a product with radio communication in the EU, &lt;a href=&quot;http://www.tuv.com/en/usa/services_usa/product_testing/telecom_it/rtte_directive/rtte_directive.html&quot;&gt;R&amp;amp;TTE&lt;/a&gt; compliance will likely be required.  GSM/M2M modules can be &lt;a href=&quot;http://www.tuv-sud.co.uk/uploads/images/1365171464129234960088/uk-mkg-guide-to-wireless-m2m-module-integration-en-uk.pdf&quot;&gt;individually certified as compliant with R&amp;amp;TTE&lt;/a&gt;, which reduces the testing burden.  A number of third party test facilities (TUV, 7-Layers, IB Lenhardt, etc.) exist which can help take a product through the R&amp;amp;TTE certification process.&lt;/p&gt;

&lt;h3 id=&quot;gcf&quot;&gt;GCF&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;http://www.globalcertificationforum.org/&quot;&gt;GCF&lt;/a&gt; (“Global Certification Forum”) operates under the ‘test once, use anywhere’ philosophy, and focuses on devices which communicate on the cellular network.  When sourcing a wireless module for a product intended for global use, checking if the module is listed in the GCF &lt;a href=&quot;http://www.globalcertificationforum.org/devices/certified-devices.html&quot;&gt;“Certified Devices List”&lt;/a&gt; provides some basic assurance that the module will be accepted onto most carrier networks without issue (in the US, however, the GCF equivalent is the “PTCRB”, mentioned at the end of this post).  When sourcing a GSM module, ensure it has passed GCF, or be sure that the carriers in the countries of intended operation don’t care either way.&lt;/p&gt;

&lt;h3 id=&quot;type-approvals&quot;&gt;Type Approvals&lt;/h3&gt;

&lt;p&gt;Typically, these are approvals that are required to market and/or sell a device within a given country.  For example, the &lt;a href=&quot;http://www.pta.gov.pk/index.php?Itemid=180&quot;&gt;Pakistan Telecommunications Authority&lt;/a&gt; notes that:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Under the Telecom Act 1996 (section 29), no terminal equipment can be directly or indirectly connected with PSTN unless it has been type approved by 	PTA.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This includes wireless modules, such as the popular SIM900/908 modules from SIMCOM.  Note on the &lt;a href=&quot;http://www.pta.gov.pk/media/ta/2g_3g_lte_mod_191214.pdf&quot;&gt;2G/3G Approved List&lt;/a&gt; that the PTA authorizes a specific ‘applicant’ to sell these modules in country.  For a different approach where the module appears to be listed without an applicant, note the Rwandan &lt;a href=&quot;http://www.rura.rw/fileadmin/docs/TYPE_APPROVED_mobile_handsets_2015.pdf&quot;&gt;Type Approved Mobile Phones&lt;/a&gt; from January 2015, where only the model name and manufacturer are listed.  Not all countries have a straightforward type-approval requirement:  India, for example, requires no type approval for GSM devices, but China potentially requires &lt;a href=&quot;http://www.7layers.com/#!/type-approval/type-approval-asia/p-r-of-china/&quot;&gt;up to three different government-regulated approvals&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;ptcrb&quot;&gt;PTCRB&lt;/h3&gt;

&lt;p&gt;This agency is technically US-only, but it’s worth including here to highlight the fact that there are additional regulatory standards outside of the FCC that can apply to GSM-based products.  The organization is a consortium of participating wireless carriers (e.g. AT&amp;amp;T, Verizon) which exists to test expected mobile device performance on a carrier network, using 3GPP and carrier-specific standards.  In general, a carrier participating in PTCRB won’t allow a device which has not passed PTCRB certification to connect to it’s network at any reasonable scale.  This certification can cost between &lt;a href=&quot;http://m2msupport.net/m2msupport/ptcrb-process-costs-timeline-and-labs/&quot;&gt;$16k-20k for a data-only device&lt;/a&gt;. The interplay between FCC, PTCRB, and additional carrier-specific standards is briefly explored &lt;a href=&quot;http://www.ecnmag.com/articles/2012/07/cellular-carrier-certification-requirements&quot;&gt;here by ECNMag&lt;/a&gt;.  The TL:DR version: &lt;strong&gt;&lt;a href=&quot;https://www.ptcrb.com/vendor/complete/complete_request.cfm&quot;&gt;just use a PTCRB approved module&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

</description>
        <pubDate>Sat, 20 Jun 2015 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/2015/06/20/Cellular-Module-Global-Approvals/</link>
        <guid isPermaLink="true">http://localhost:4000/2015/06/20/Cellular-Module-Global-Approvals/</guid>
        
        
      </item>
    
      <item>
        <title>Relaxation Oscillator with Variable Duty Cycle</title>
        <description>&lt;p&gt;A “Relaxation Oscillator” is just a fancy name for a circuit which generates a repetitive output signal (Wikipedia says this must be nonsinusoidal).  Most examples are for 50% duty cycle designs.  Here, build one using the &lt;a href=&quot;http://www.nxp.com/documents/data_sheet/NCX2200.pdf&quot;&gt;NXP NXC2200&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;components&quot;&gt;Components&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Comparator (op-amp will work too)&lt;/li&gt;
  &lt;li&gt;3x equal value resistors (R1-R3)&lt;/li&gt;
  &lt;li&gt;1x small signal diode&lt;/li&gt;
  &lt;li&gt;1x capacitor in the 1-20nF range (C1)&lt;/li&gt;
  &lt;li&gt;1x resistor in the 100 to 500k range (R4)&lt;/li&gt;
  &lt;li&gt;1x resistor approximately 20% the size of R4 (R5)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wire up the circuit like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://everycircuit.com/circuit/6290233901449216&quot;&gt;Relaxation Oscillator - EveryCircuit&lt;/a&gt;&lt;br /&gt; &amp;lt;iframe width=&quot;560&quot; height=&quot;360&quot; src=&quot;http://everycircuit.com/embed/6290233901449216&quot; frameborder=&quot;0&quot;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;

&lt;p&gt;Note that in this example, R1-R3 are 510k, C1 is 8.2nF, R4 is 330k, and R5 is the combination of 50k and 30k – simulation is a bit wonky when it comes to making this converge.&lt;/p&gt;

&lt;h3 id=&quot;testing&quot;&gt;Testing&lt;/h3&gt;

&lt;p&gt;Wire up the comparator/op-amp, and take a look on your scope.  The pulse width seen at the output should have a variable duty cycle. This is a direct result of the time constant for charging C1 being smaller than the time constant for C1 to discharge (due to the diode allowing for a parallel resistance only when C1 is charging).&lt;/p&gt;

&lt;h3 id=&quot;uses&quot;&gt;Uses&lt;/h3&gt;

&lt;p&gt;Timing circuits, periodic enable lines (or wakeups), triggers for sampling, etc.  The shorter on-time can allow for lower quiescent current when attempting to enable a power-hungry device that doesn’t need to be on for the full 50% duty cycle.&lt;/p&gt;

&lt;h3 id=&quot;additional-notes&quot;&gt;Additional Notes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The quiescent current of this circuit can get fairly low; on the order of microamps, depending on component selection.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If repeatable thresholds/oscillation frequencies are not a concern, this can be made pretty cheaply with a Schmitt Trigger instead of comparator/op-amp.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 13 Oct 2014 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/2014/10/13/Relaxation-Oscillator-DutyCycle/</link>
        <guid isPermaLink="true">http://localhost:4000/2014/10/13/Relaxation-Oscillator-DutyCycle/</guid>
        
        
      </item>
    
      <item>
        <title>Building for the Atmel &quot;SAMD20 Xplained Pro&quot; in Ubuntu 14.04</title>
        <description>&lt;p&gt;This is a brief outline of the steps taken to get sample code from the Atmel ASF for the “SAMD20 Xplained Pro” built and flashed to the board from Ubuntu 14.04.  Much of this guide is built around insights from &lt;a href=&quot;https://plus.google.com/+AndreyYurovsky/posts/5JTehC7ngTq&quot;&gt;AndreyYurovsky&lt;/a&gt; and &lt;a href=&quot;http://blog.matwey.name/2013/12/atmel-atsamd20-xpro.html&quot;&gt;V. Kornilov Matwey&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;prerequisite-hardware&quot;&gt;Prerequisite Hardware&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.atmel.com/Images/Atmel-42147-SAM-D20-Getting-Started-with-SAMD20_Application-Note_AT03293.pdf&quot;&gt;“Atmel SAM D20 Xplained Pro Evaluation Kit (ATSAMD20-XPRO)”&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.atmel.com/Images/Atmel-42129-SAM-D20_Datasheet.pdf&quot;&gt;SAMD20 Datasheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;software-installation&quot;&gt;Software Installation&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.eclipse.org/cdt/&quot;&gt;Eclipse CDT&lt;/a&gt; this is an Eclipse IDE tailored to C/C++ development.  This guide was written for Eclipse Kepler, install this first.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://launchpad.net/gcc-arm-embedded&quot;&gt;GNU Tools for Embedded Processors&lt;/a&gt; this is a toolchain that has worked on Cortex M0/M0+ processors.  This guide is tested using version 2014-q2.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Atmel makes the &lt;a href=&quot;http://www.atmel.com/tools/AVRSOFTWAREFRAMEWORK.aspx&quot;&gt;“Atmel Software Framework”&lt;/a&gt;, available which provides plenty of actual code to begin working on the SAMD20 board.  Download this file; its large (200MB).  This guide was written for version 3.19.0 (“xdk-asf-3.19.0”).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://sourceforge.net/p/openocd/tickets/milestone/0.9.0/&quot;&gt;OpenOCD 0.9.0&lt;/a&gt; is used to actually connect to the board.  To install this, follow the instructions at https://plus.google.com/+AndreyYurovsky/posts/5JTehC7ngTq, transcribed here for convenience:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Execute the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install libudev-dev
git clone git://github.com/signal11/hidapi.git
cd hidapi
./bootstrap
./configure
make
sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, make sure that your sources.list file contains ‘deb-src’ entries.  If it doesn’t, copy the existing ‘deb’ entries for Ubuntu repositories, and create an identical line for each of them, with ‘deb’ replaced by ‘deb-src’.  For example, here is my sources.list file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deb http://mirror.math.ucdavis.edu/ubuntu/ trusty main universe restricted multiverse
deb-src http://mirror.math.ucdavis.edu/ubuntu/ trusty main universe restricted multiverse
deb http://mirror.math.ucdavis.edu/ubuntu/ trusty-updates main universe restricted multiverse
deb-src http://mirror.math.ucdavis.edu/ubuntu/ trusty-updates main universe restricted multiverse
deb http://security.ubuntu.com/ubuntu/ trusty-security main universe restricted multiverse
deb-src http://security.ubuntu.com/ubuntu/ trusty-security main universe restricted multiverse
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, obtain the OpenOCD source code, and build it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone git://git.code.sf.net/p/openocd/code openocd
cd openocd
sudo apt-get build-dep openocd
./bootstrap
./configure
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The output at this point (after ./configure) should look like the following image.  Specifically, note that CMSIS-DAP support is present:
&lt;img src=&quot;/assets/images/OpenOCD_Config_CMSIS.png&quot; alt=&quot;OpenOCD_CMSIS-DAP&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then run:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make
sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;At this point, you can try to launch OpenOCD to ensure that the install completed succesfully.  If an error along the lines of “error while loading shared libraries: libhidapi-hidraw.so.0” occurs, just run the following and retry:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install libhidapi-hidraw0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, copy the udev rules for OpenOCD to the appropriate location, so that the SAMD20 Xplained Pro board is properly identified when plugged into USB:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo cp contrib/99-openocd.rules /etc/udev/rules.d/99-openocd.rules
sudo udevadm control --reload-rules
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, if you plug in “SAMD20 Xplained Pro” via USB, and run the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openocd -f /./usr/local/share/openocd/scripts/board/atmel_samd20_xplained_pro.cfg 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The following (or similar) output should result:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Open On-Chip Debugger 0.9.0-dev-00148-g3a4ec66 (2014-09-18-14:32)
Licensed under GNU GPL v2
For bug reports, read
    http://openocd.sourceforge.net/doc/doxygen/bugs.html
Info : only one transport option; autoselect 'cmsis-dap'
adapter speed: 500 kHz
adapter_nsrst_delay: 100
cortex_m reset_config sysresetreq
Info : CMSIS-DAP: SWD  Supported
Info : CMSIS-DAP: Interface Initialised (SWD)
Info : CMSIS-DAP: FW Version = 01.1A.00FB
Info : SWCLK/TCK = 1 SWDIO/TMS = 1 TDI = 1 TDO = 1 nTRST = 0 nRESET = 1
Info : DAP_SWJ Sequence (reset: 50+ '1' followed by 0)
Info : CMSIS-DAP: Interface ready
Info : clock speed 500 kHz
Info : IDCODE 0x0bc11477
Info : at91samd20j18.cpu: hardware has 4 breakpoints, 2 watchpoints    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This indicates that OpenOCD is successfully connected to the board; more specifically, to the debugger chip located on the backside of the board (note the microcontroller closer to the USB port).  The “Interface Initialised (SWD)” indicates that the debugger is connected to the MCU.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Note: it may be possible to use this onboard debugger to connect to other SAMD20 MCUs external to the development board by connecting to the external header pins for SWD.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point, if you receive an error indicating “unable to open CMSIS-DAP device”, try a different USB port (or try unplugging other USB devices).Also, confirm that ‘Atmel Corp.’ appears in lsusb when the board is plugged in.&lt;/p&gt;

&lt;h3 id=&quot;importing-asf-example-into-eclipse&quot;&gt;Importing ASF Example into Eclipse&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Launch Eclipse CDT, and navigate to “File-&amp;gt;Import”.  Select “Existing Projects into Workspace” from “General”.&lt;/li&gt;
  &lt;li&gt;From here, navigate to the directory where you downloaded/unzipped the ASF; for me, its called “xdk-asf-3.19.0”&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Navigate to the LED Toggle example project for SAMD20 Xplained, which is found at:
  xdf-asf-3.19.0/sam0/applications/led_toggle/samd20_xplained_pro/gcc
&lt;img src=&quot;/assets/images/Import_SAMD20_Example.png&quot; alt=&quot;Import SAMD20 Example&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click “Copy Projects into Workspace”, and click Finish.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point, the project should be in your workspace, and a directory structure something like the following image, without the binaries is likely what shows up in the project tree:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/SAMD20_Project_Tree.png&quot; alt=&quot;Project Tree&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that “config.mk” and “Makefile” are both here, these are important.&lt;/p&gt;

&lt;p&gt;If you try to build this, you will likely encounter errors – the pathing for the Makefile doesn’t expect the example to be located in your workspace, so a few files have to change to accommodate this.&lt;/p&gt;

&lt;p&gt;Open the Makefile (which is now in your workspace, in the imported project), and notice the following line:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MAKEFILE_PATH = ../../../../../sam0/utils/make/Makefile.sam.in
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We will need to change this to point to where the “xdk-asf-3.19.0” directory is located.  An easy solution (probably not best practices for project structure, but it will work) is to copy the xdk-asf-3.19.0 directory into the project directory, and make the following change in the Makefile:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#in the makefile, comment this out
###MAKEFILE_PATH = ../../../../../sam0/utils/make/Makefile.sam.in
#replace with the following line
MAKEFILE_PATH = xdk-asf-3.19.0/sam0/utils/make/Makefile.sam.in
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next, open “config.mk” in the project directory, and find the following section:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Path to top level ASF directory relative to this project directory.
PRJ_PATH = ../../../../..
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Change this section to the correct path, as here:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#Path to top level ASF directory relative to this project directory.
#Note that since we moved the ASF directory into the project directory, 
#just type in the name of the ASF directory.
PRJ_PATH = xdk-asf-3.19.0/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next, right click on the project, and go to properties.  From the C/C++ Build section, under “Builder Settings”,
uncheck “Use Default Build Command”, and type “make -f Makefile” instead, as in the following image:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/CDT_Builder_Makefile.png&quot; alt=&quot;CDT Builder Makefile Dialog&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, apply the change, refresh the project, and attempt to build.  With any luck, you’ll end up with a successful build, producing .elf and .hex files that can then be used to program the board.&lt;/p&gt;

&lt;h3 id=&quot;installing-program-to-samd20-xplained-pro&quot;&gt;Installing Program to SAMD20 Xplained Pro&lt;/h3&gt;

&lt;p&gt;We’ll use gdb for this step, so run the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install gdb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Open a terminal, get OpenOCD up and running as in the previous step, and connect to the board.  Ensure that the below line appears:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;info : at91samd20j18.cpu: hardware has 4 breakpoints, 2 watchpoints 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next, open another terminal, and navigate to the Eclipse workspace where your project resides.  Navigate to where the generated files are (look for the .bin and .elf files) and type the following in the terminal (from Andrey Yurovsky’s G+ post):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arm-none-eabi-gdb -ex &quot;target remote localhost:3333&quot; -ex &quot;mon reset halt&quot; low_power_flash.elf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will cause some additional lines of output to appear in your OpenOCD window; this is expected.  See the below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/OpenOCD_AfterGDB.png&quot; alt=&quot;OpenOCD After GDB&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, in gdb, type the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;load
mon reset init
c
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, pressing the SW0 button (not the reset button) on the SAMD20 Xplained Pro dev board will light LED0.&lt;/p&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;

&lt;p&gt;To experiment, look at the “config.mk” file, and see where the source files are being pulled from – to build your own files, just modify these entires in config.mk, and have at it.&lt;/p&gt;
</description>
        <pubDate>Thu, 18 Sep 2014 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/2014/09/18/Atmel-SAMD20-EclipseCDT/</link>
        <guid isPermaLink="true">http://localhost:4000/2014/09/18/Atmel-SAMD20-EclipseCDT/</guid>
        
        
      </item>
    
      <item>
        <title>Importing Atollic C Projects to Eclipse</title>
        <description>&lt;h3 id=&quot;eclipse-cdt-and-cortex-m0&quot;&gt;Eclipse CDT and Cortex M0&lt;/h3&gt;

&lt;p&gt;1) Get &lt;a href=&quot;http://www.eclipse.org/cdt/&quot;&gt;Eclipse CDT&lt;/a&gt;; this is an Eclipse IDE tailored to C/C++ development.  AFter installing Eclipse CDT, go to “Help”, and “Install New Software”.  Add http://gnuarmeclipse.sourceforge.net/updates to the “Work with” path, and select the available update.  Install this, and restart Eclipse.  &lt;strong&gt;Tested on Kepler&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;2) Ignore everything you read about CodeLite/CodeSourcery.  You want a cross-ARM toolchain that supports newlib-nano, for the size-optimized nano libraries.  Specifically, you want “GNU Tools for Embedded Processors (gcc-arm-embedded); download the latest precompiled toolchain (or source, if you are feeling masochistic today) from &lt;a href=&quot;https://launchpad.net/gcc-arm-embedded&quot;&gt;LaunchPad&lt;/a&gt;.  It’s maintained by ARM employees so hopefully it isn’t broken.  I’ve tested a working binary created on release &lt;a href=&quot;https://launchpad.net/gcc-arm-embedded/+milestone/4.8-2014-q2-update&quot;&gt;2014-q2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://avr-eclipse.sourceforge.net/user%20manual/concepts/toolchain.html&quot;&gt;Embedded Toolchain Diagram&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;3) Get a copy of whatever project you’ve successfully developed in Atollic, that you wish to port to this toolchain.&lt;/p&gt;

&lt;p&gt;4) Launch Eclipse CDT, and go to “File-&amp;gt;Import” to import this project into the workspace.&lt;/p&gt;

&lt;p&gt;5) Right click on the project name, and go to “Properties”
- Click on “C/C++ Build”, and note the “Configuration” at the top of the dialog, this is the name of this configuration to which these settings are saved.  It is likely “Default [Active]”
- Under “C/C++ Build” on the “Builder Settings” tab, set the Builder Type to “Internal Builder”&lt;/p&gt;

&lt;p&gt;6) Under the “C/C++ Build” category, click on “Settings”, then “Toolchains”.  Ensure that the name of the toolchain contains a mention of “arm-none-eabi-gcc”&lt;/p&gt;

&lt;p&gt;7) Click the “Use Global Toolchain Path”, and navigate to the /bin folder of the toolchain code downloaded and extracted in  step 2.  For example, “/home/josh/Development/gcc-arm-none-eabi-4_8-2014q2/bin”.&lt;/p&gt;

&lt;p&gt;8) Under “Settings” -&amp;gt; “Tool Settings”, set the following:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Target Processor&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ARM family to “cortex-m0”&lt;/li&gt;
  &lt;li&gt;Instruction set to “Thumb”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Optimization&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Optimize level “-Os” (optimize size)&lt;/li&gt;
  &lt;li&gt;Enable “Function Sections” (-ffunction-sections)&lt;/li&gt;
  &lt;li&gt;Enable “Data Sections” (-fdata-sections)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Warnings&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Set “Enable all common warnings (-Wall)”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Debugging&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Set Debug Level to “None”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cross ARM GNU Assembler&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Under “Preprocessor”, enable “Use Preprocessor” and “Do not search system directories (-nostdinc)”&lt;/li&gt;
  &lt;li&gt;Ensure that nothing is listed under the “Includes” path, “Warnings” flags, or “Miscellaneous” flags here&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cross ARM C Compiler&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Under “Preprocessor”, add any symbols that are necessary for your project from Atollic&lt;/li&gt;
  &lt;li&gt;Add library paths to the processor-specific header files for the processor which you are building.  In the case of the Cortex-MO, this is likely three folders, with names like “/CMSIS/Device/ST/STM32F0xx/Include”, “CMSIS/Include”, and “STM32F0xx_StdPeriph_Driver/inc”&lt;/li&gt;
  &lt;li&gt;Add library paths to your own code header files as well&lt;/li&gt;
  &lt;li&gt;Under “Optimization”, set the toolchain language to GNU ISO C90&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cross ARM C Linker&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Under “General”, enable “Remove unused sections (-Xlinker -gc-sections)”&lt;/li&gt;
  &lt;li&gt;Under “General”, add the script file (which will be executed with “-T”) for your processor.  For the STM32, use “stm32_flash.ld”&lt;/li&gt;
  &lt;li&gt;Under “Other Linker Flags”, add the following:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Wl,--start-group -lc -lm -Wl,--end-group -static -Wl,-cref,-u,Reset_Handler
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Post Build Commands&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The above commands will allow Eclipse to generate an .elf file.  To generate a bin or hex, use whatever tool you find most preferable.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disabling Debug Symbols&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The BlinkyLED project is probably too large (flash overflow) when targetted against an F4.  Follow the steps here to disable debug symbols:
http://wiki.wxwidgets.org/Eclipse,&lt;em&gt;CDT&lt;/em&gt;%26&lt;em&gt;MingW&lt;/em&gt;%26_MSYS_Setup_Guide#Changing_the_Build_Configuration&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;
&lt;a href=&quot;http://www.tutorialspoint.com/cprogramming/c_operators.htm&quot;&gt;Operators and C Syntax&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Sep 2014 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/2014/09/09/atollic-to-eclipse/</link>
        <guid isPermaLink="true">http://localhost:4000/2014/09/09/atollic-to-eclipse/</guid>
        
        
      </item>
    
  </channel>
</rss>
